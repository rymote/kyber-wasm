name: Publish Kyber WASM Package

on:
  push:
    tags:
      - 'v*.*.*'
    paths:
      - 'contrib/wasm/**'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to publish (e.g., 1.1.1)'
        required: true
        type: string

jobs:
  publish:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Extract version from tag or input
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.version }}"
          else
            VERSION="${GITHUB_REF#refs/tags/v}"
          fi
          echo "VERSION=$VERSION" >> "$GITHUB_ENV"
          echo "Resolved version: $VERSION"

      - name: Cache Emscripten
        uses: actions/cache@v3
        with:
          path: emsdk
          key: emsdk-${{ runner.os }}-latest
          restore-keys: emsdk-${{ runner.os }}-

      - name: Setup Emscripten
        run: |
          if [ ! -d "emsdk" ]; then
            git clone https://github.com/emscripten-core/emsdk.git
            cd emsdk
            ./emsdk install latest
            ./emsdk activate latest
          else
            cd emsdk
            ./emsdk activate latest
          fi
          source ./emsdk_env.sh
          echo "$(pwd)" >> $GITHUB_PATH
          echo "$(pwd)/upstream/emscripten" >> $GITHUB_PATH
          echo "EMSDK=$(pwd)" >> $GITHUB_ENV
          echo "EM_CONFIG=$(pwd)/.emscripten" >> $GITHUB_ENV

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install build dependencies
        run: sudo apt-get update && sudo apt-get install -y build-essential jq

      - name: Update versions (root + template)
        working-directory: contrib/wasm
        run: |
          echo "Setting root package.json version to $VERSION"
          # Use npm pkg set to avoid creating git tags
          npx --yes npm@latest pkg set version="$VERSION"

          echo "Setting src/package.json.template version to $VERSION"
          jq --arg version "$VERSION" '.version = $version' src/package.json.template > src/package.json.template.tmp
          mv src/package.json.template.tmp src/package.json.template

          echo "Root version: $(jq -r '.version' package.json)"
          echo "Template version: $(jq -r '.version' src/package.json.template)"
          
      - name: Verify versions
        working-directory: contrib/wasm
        run: |
          ROOT_VERSION=$(jq -r '.version' package.json)
          TPL_VERSION=$(jq -r '.version' src/package.json.template)
          if [ "$ROOT_VERSION" != "$VERSION" ] || [ "$TPL_VERSION" != "$VERSION" ]; then
            echo "Version mismatch! root=$ROOT_VERSION template=$TPL_VERSION expected=$VERSION"
            exit 1
          fi

      - name: Build WASM modules
        working-directory: contrib/wasm
        run: |
          echo "Building WASM modules..."
          npm run build
          echo "Build completed. Contents of dist:"
          ls -la dist/

      - name: Run tests
        working-directory: contrib/wasm
        run: |
          echo "Running tests..."
          npm test

      - name: Publish to NPM
        working-directory: contrib/wasm
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_ACCESS_TOKEN }}
        run: |
          echo "Setting up NPM authentication..."
          echo "//registry.npmjs.org/:_authToken=${NODE_AUTH_TOKEN}" > ~/.npmrc
          echo "Publishing to NPM..."
          npm publish --registry https://registry.npmjs.org --access public --ignore-scripts

      - name: Publish to GitHub Packages
        working-directory: contrib/wasm
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "Setting up GitHub Packages authentication..."
          cat > ~/.npmrc << EOF
          //npm.pkg.github.com/:_authToken=${GH_TOKEN}
          @rymote:registry=https://npm.pkg.github.com
          EOF
          echo "Publishing to GitHub Packages..."
          npm publish --registry https://npm.pkg.github.com --access public --ignore-scripts

      - name: Prepare GitHub Release Assets
        if: startsWith(github.ref, 'refs/tags/')
        working-directory: contrib/wasm
        run: |
          echo "Preparing release assets..."
          mkdir -p release-assets
          
          # Copy WASM files and JS loaders
          cp dist/*.wasm release-assets/
          cp dist/kyber512_wasm.js release-assets/
          cp dist/kyber768_wasm.js release-assets/
          cp dist/kyber1024_wasm.js release-assets/
          
          # Copy TypeScript definitions and docs
          cp dist/kyber.d.ts release-assets/
          cp README.md release-assets/
          
          # Create usage documentation
          cat > release-assets/USAGE.md << 'EOF'
          # Kyber WASM Direct Usage
          
          Download these files to use Kyber WASM directly without npm.
          
          ## Files Included
          - `kyber512_wasm.wasm` + `kyber512_wasm.js` - Kyber-512 
          - `kyber768_wasm.wasm` + `kyber768_wasm.js` - Kyber-768
          - `kyber1024_wasm.wasm` + `kyber1024_wasm.js` - Kyber-1024
          - `kyber.d.ts` - TypeScript definitions
          
          ## Quick Example
          ```javascript
          import Kyber512Module from './kyber512_wasm.js';
          
          const module = await Kyber512Module();
          
          // Allocate memory
          const pkPtr = module._malloc(800);   // Public key
          const skPtr = module._malloc(1632);  // Secret key
          
          // Generate keypair
          const result = module._kyber512_keypair(pkPtr, skPtr);
          
          // Read keys
          const publicKey = new Uint8Array(800);
          for (let i = 0; i < 800; i++) {
            publicKey[i] = module.getValue(pkPtr + i, 'i8') & 0xFF;
          }
          
          // Clean up
          module._free(pkPtr);
          module._free(skPtr);
          ```
          
          ## Available Functions
          ### Basic Operations
          - `_kyber512_keypair(pk, sk)` - Generate Kyber-512 keypair
          - `_kyber512_enc(ct, ss, pk)` - Kyber-512 encapsulation  
          - `_kyber512_dec(ss, ct, sk)` - Kyber-512 decapsulation
          - Similar for `_kyber768_*` and `_kyber1024_*`
          
          ### Seeded Operations (Deterministic)
          - `_kyber512_keypair_seeded(pk, sk, seed)` - Seeded keypair (64-byte seed)
          - `_kyber512_enc_seeded(ct, ss, pk, seed)` - Seeded encapsulation (32-byte seed)
          - Similar for `_kyber768_*` and `_kyber1024_*`
          
          ## Key Sizes
          - **Kyber-512**: pk=800, sk=1632, ct=768, ss=32 bytes
          - **Kyber-768**: pk=1184, sk=2400, ct=1088, ss=32 bytes  
          - **Kyber-1024**: pk=1568, sk=3168, ct=1568, ss=32 bytes
          
          ## For Easier Usage
          ```bash
          npm install @rymote/kyber-wasm
          ```
          EOF
          
          # Create checksums
          cd release-assets
          sha256sum *.wasm *.js *.d.ts > SHA256SUMS.txt
          cd ..
          
          # Create archives
          cd release-assets
          zip -r ../kyber-wasm-v$VERSION.zip .
          tar -czf ../kyber-wasm-v$VERSION.tar.gz .
          cd ..

      - name: Create GitHub Release
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v1
        with:
          name: "Kyber WASM v${{ env.VERSION }}"
          body: |
            ## ðŸš€ Kyber WASM v${{ env.VERSION }}
            
            Post-quantum cryptography for JavaScript with deterministic operations support.
            
            ### ðŸ“¦ NPM Installation
            ```bash
            npm install @rymote/kyber-wasm@${{ env.VERSION }}
            ```
            
            ### ðŸ”§ Direct WASM Usage
            Download the files below to use WASM directly in any JavaScript runtime.
            
            ### âœ¨ New Features
            - âœ… **Seeded operations** - Deterministic keypair and encapsulation
            - âœ… **All Kyber variants** - 512, 768, 1024 bit security levels
            - âœ… **Cross-platform** - Browser and Node.js compatible
            - âœ… **TypeScript support** - Full type definitions included
            - âœ… **Memory safe** - Proper WASM memory management
            
            ### ðŸ”’ Security
            - Based on official NIST PQC reference implementation
            - Cryptographically secure random number generation
            - Memory-safe WebAssembly implementation
            
            See `USAGE.md` for direct WASM integration examples.
          files: |
            contrib/wasm/kyber-wasm-v${{ env.VERSION }}.zip
            contrib/wasm/kyber-wasm-v${{ env.VERSION }}.tar.gz
            contrib/wasm/release-assets/*.wasm
            contrib/wasm/release-assets/*_wasm.js
            contrib/wasm/release-assets/kyber.d.ts
            contrib/wasm/release-assets/USAGE.md
            contrib/wasm/release-assets/SHA256SUMS.txt
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
