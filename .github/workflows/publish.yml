name: Publish Kyber WASM Package

on:
  push:
    tags:
      - 'v*.*.*'
    paths:
      - 'contrib/wasm/**'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to publish (e.g., 1.0.0)'
        required: true
        type: string

jobs:
  publish:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Extract version from tag or input
        id: extract_version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "VERSION=${{ github.event.inputs.version }}" >> $GITHUB_ENV
          else
            echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_ENV
          fi

      - name: Cache Emscripten
        uses: actions/cache@v3
        id: cache-emsdk
        with:
          path: emsdk
          key: emsdk-${{ runner.os }}-${{ hashFiles('**/lockfiles') }}
          restore-keys: |
            emsdk-${{ runner.os }}-

      - name: Setup Emscripten
        run: |
          if [ ! -d "emsdk" ]; then
            # Install Emscripten manually for better reliability
            git clone https://github.com/emscripten-core/emsdk.git
            cd emsdk
            ./emsdk install latest
            ./emsdk activate latest
          else
            # Use cached version
            cd emsdk
            ./emsdk activate latest
          fi
          source ./emsdk_env.sh
          # Add to PATH for subsequent steps
          echo "$(pwd)" >> $GITHUB_PATH
          echo "$(pwd)/upstream/emscripten" >> $GITHUB_PATH
          # Set environment variables
          echo "EMSDK=$(pwd)" >> $GITHUB_ENV
          echo "EM_CONFIG=$(pwd)/.emscripten" >> $GITHUB_ENV
          echo "EMSDK_NODE=$(pwd)/node/*/bin/node" >> $GITHUB_ENV

      - name: Setup Node for npmjs.org
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          registry-url: https://registry.npmjs.org

      - name: Install build dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential

      - name: Sync package.json version
        working-directory: contrib/wasm
        run: npm version $VERSION --no-git-tag-version --allow-same-version

      - name: Build WASM modules
        working-directory: contrib/wasm
        run: npm run build

      - name: Run tests
        working-directory: contrib/wasm
        run: npm test

      - name: Authenticate to npmjs.org
        run: echo "//registry.npmjs.org/:_authToken=${{ secrets.NPM_ACCESS_TOKEN }}" >> ~/.npmrc

      - name: Publish to npmjs.org
        working-directory: contrib/wasm
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_ACCESS_TOKEN }}
        run: npm publish --access public

      - name: Setup Node for GitHub Packages
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          registry-url: https://npm.pkg.github.com
          always-auth: true
          scope: '@rymote'

      - name: Authenticate to GitHub Packages
        run: echo "//npm.pkg.github.com/:_authToken=${{ secrets.GITHUB_TOKEN }}" >> ~/.npmrc

      - name: Publish to GitHub Packages
        working-directory: contrib/wasm
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: npm publish --registry https://npm.pkg.github.com --access public

      - name: Prepare release assets
        working-directory: contrib/wasm
        run: |
          # Create release directory
          mkdir -p release-assets
          
          # Copy WASM files and JS modules
          cp dist/*.wasm release-assets/
          cp dist/kyber512_wasm.js release-assets/
          cp dist/kyber768_wasm.js release-assets/
          cp dist/kyber1024_wasm.js release-assets/
          
          # Copy TypeScript definitions
          cp dist/kyber.d.ts release-assets/
          
          # Copy documentation
          cp README.md release-assets/
          
          # Create a usage example for raw WASM
          cat > release-assets/USAGE.md << 'EOF'
          # Using Kyber WASM Files Directly
          
          This release contains the compiled WASM files that can be used in any JavaScript runtime:
          
          ## Files Included:
          - `kyber512_wasm.wasm` - Kyber-512 WASM binary
          - `kyber768_wasm.wasm` - Kyber-768 WASM binary  
          - `kyber1024_wasm.wasm` - Kyber-1024 WASM binary
          - `kyber512_wasm.js` - Emscripten-generated JS loader for Kyber-512
          - `kyber768_wasm.js` - Emscripten-generated JS loader for Kyber-768
          - `kyber1024_wasm.js` - Emscripten-generated JS loader for Kyber-1024
          - `kyber.d.ts` - TypeScript definitions
          
          ## Basic Usage Example:
          ```javascript
          // Load the WASM module directly
          import Kyber512Module from './kyber512_wasm.js';
          
          const module = await Kyber512Module();
          
          // Allocate memory for keys
          const pkPtr = module._malloc(800);  // Public key size for Kyber-512
          const skPtr = module._malloc(1632); // Secret key size for Kyber-512
          
          // Generate keypair
          const result = module._kyber512_keypair(pkPtr, skPtr);
          
          // Read the keys
          const publicKey = new Uint8Array(800);
          const secretKey = new Uint8Array(1632);
          for (let i = 0; i < 800; i++) {
            publicKey[i] = module.getValue(pkPtr + i, 'i8') & 0xFF;
          }
          for (let i = 0; i < 1632; i++) {
            secretKey[i] = module.getValue(skPtr + i, 'i8') & 0xFF;
          }
          
          // Clean up
          module._free(pkPtr);
          module._free(skPtr);
          ```
          
          ## Key Sizes:
          - **Kyber-512**: Public key: 800 bytes, Secret key: 1632 bytes, Ciphertext: 768 bytes
          - **Kyber-768**: Public key: 1184 bytes, Secret key: 2400 bytes, Ciphertext: 1088 bytes  
          - **Kyber-1024**: Public key: 1568 bytes, Secret key: 3168 bytes, Ciphertext: 1568 bytes
          - **Shared Secret**: 32 bytes (all variants)
          
          ## Available Functions:
          - `_kyber512_keypair(pk_ptr, sk_ptr)` - Generate Kyber-512 keypair
          - `_kyber512_enc(ct_ptr, ss_ptr, pk_ptr)` - Kyber-512 encapsulation
          - `_kyber512_dec(ss_ptr, ct_ptr, sk_ptr)` - Kyber-512 decapsulation
          - Similar functions available for `_kyber768_*` and `_kyber1024_*`
          
          For a higher-level API, use the npm package: `npm install @rymote/kyber-wasm`
          EOF
          
          # Create checksums
          cd release-assets
          sha256sum *.wasm *.js *.ts > SHA256SUMS.txt
          cd ..
          
          # Create archive
          cd release-assets
          zip -r ../kyber-wasm-v$VERSION.zip .
          tar -czf ../kyber-wasm-v$VERSION.tar.gz .
          cd ..

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          name: "Kyber WASM v${{ env.VERSION }}"
          body: |
            ## ðŸš€ Kyber WASM Release v${{ env.VERSION }}
            
            This release contains both the npm package and raw WASM files for Kyber post-quantum cryptography.
            
            ### ðŸ“¦ NPM Package
            ```bash
            npm install @rymote/kyber-wasm@${{ env.VERSION }}
            ```
            
            ### ðŸ”§ Raw WASM Files
            Download the assets below to use the WASM files directly in any JavaScript runtime.
            
            ### ðŸ“‹ What's Included
            - âœ… Kyber-512, Kyber-768, and Kyber-1024 implementations
            - âœ… Browser and Node.js compatibility
            - âœ… TypeScript definitions
            - âœ… Usage examples and documentation
            - âœ… SHA256 checksums for verification
            
            ### ðŸ”’ Security
            - Uses cryptographically secure random number generation
            - Memory-safe WASM implementation
            - Based on the official NIST PQC reference implementation
            
            See `USAGE.md` in the archive for direct WASM usage examples.
          files: |
            contrib/wasm/kyber-wasm-v${{ env.VERSION }}.zip
            contrib/wasm/kyber-wasm-v${{ env.VERSION }}.tar.gz
            contrib/wasm/release-assets/*.wasm
            contrib/wasm/release-assets/*_wasm.js
            contrib/wasm/release-assets/kyber.d.ts
            contrib/wasm/release-assets/USAGE.md
            contrib/wasm/release-assets/SHA256SUMS.txt
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
