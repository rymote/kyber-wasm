import Kyber512Module from './kyber512_wasm.js';

/**
 * Debug test to verify WASM module functionality including seeded operations
 */
async function debugTest() {
  console.log('üîç Starting comprehensive debug test...\n');

  try {
    // Step 1: Load module
    console.log('1. Loading WASM module...');
    const module = await Kyber512Module();
    console.log('‚úÖ Module loaded:', typeof module);

    // Step 2: Check available functions
    console.log('\n2. Checking available functions...');
    const functions = Object.keys(module).filter(key => key.startsWith('_kyber') || key.startsWith('_malloc') || key.startsWith('_free'));
    console.log('üìã Available functions:', functions);

    // Step 3: Check required functions exist
    const requiredFunctions = [
      '_malloc', '_free',
      '_kyber512_keypair', '_kyber512_enc', '_kyber512_dec',
      '_kyber512_keypair_seeded', '_kyber512_enc_seeded'
    ];

    console.log('\n3. Verifying required functions...');
    for (const func of requiredFunctions) {
      const exists = typeof module[func] === 'function';
      console.log(`${exists ? '‚úÖ' : '‚ùå'} ${func}: ${exists ? 'available' : 'MISSING'}`);
      if (!exists && func.includes('seeded')) {
        console.log(`‚ö†Ô∏è  Seeded function ${func} not found - may need to rebuild with seeded functions`);
      }
    }

    // Step 4: Check memory functions
    console.log('\n4. Testing memory management...');
    const testPtr = module._malloc(100);
    console.log(`‚úÖ malloc(100): ${testPtr}`);

    if (typeof module.writeArrayToMemory === 'function') {
      console.log('‚úÖ writeArrayToMemory: available');
    } else {
      console.log('‚ùå writeArrayToMemory: MISSING');
    }

    if (typeof module.getValue === 'function') {
      console.log('‚úÖ getValue: available');
    } else {
      console.log('‚ùå getValue: MISSING');
    }

    module._free(testPtr);
    console.log('‚úÖ free: successful');

    // Step 5: Test basic memory operations
    console.log('\n5. Testing memory read/write...');
    const memPtr = module._malloc(64);
    const testData = new Uint8Array([1, 2, 3, 4, 5]);
    
    try {
      module.writeArrayToMemory(testData, memPtr);
      console.log('‚úÖ writeArrayToMemory: successful');

      const readBack = [];
      for (let i = 0; i < 5; i++) {
        readBack.push(module.getValue(memPtr + i, 'i8') & 0xFF);
      }
      console.log(`‚úÖ Read back: [${readBack.join(', ')}]`);
      
      const dataMatches = testData.every((v, i) => v === readBack[i]);
      console.log(`‚úÖ Data integrity: ${dataMatches}`);
    } finally {
      module._free(memPtr);
    }

    // Step 6: Test random keypair generation
    console.log('\n6. Testing random keypair generation...');
    const pkPtr = module._malloc(800);
    const skPtr = module._malloc(1632);

    try {
      const result = module._kyber512_keypair(pkPtr, skPtr);
      console.log(`‚úÖ kyber512_keypair result: ${result}`);

      // Read a few bytes to verify data was written
      const pkSample = [];
      for (let i = 0; i < 8; i++) {
        pkSample.push(module.getValue(pkPtr + i, 'i8') & 0xFF);
      }
      console.log(`‚úÖ Public key sample: [${pkSample.map(x => x.toString(16).padStart(2, '0')).join(', ')}]`);

    } finally {
      module._free(pkPtr);
      module._free(skPtr);
    }

    // Step 7: Test seeded keypair generation (if available)
    if (typeof module._kyber512_keypair_seeded === 'function') {
      console.log('\n7. Testing seeded keypair generation...');
      
      const seedPtr = module._malloc(64);
      const pkSeededPtr = module._malloc(800);
      const skSeededPtr = module._malloc(1632);

      try {
        // Create deterministic seed
        const seed = new Uint8Array(64);
        for (let i = 0; i < 64; i++) {
          seed[i] = (i * 3 + 42) & 0xFF; // Deterministic pattern
        }
        
        module.writeArrayToMemory(seed, seedPtr);
        console.log(`‚úÖ Seed written: [${Array.from(seed.slice(0, 8)).map(x => x.toString(16).padStart(2, '0')).join(', ')}...]`);

        const seededResult = module._kyber512_keypair_seeded(pkSeededPtr, skSeededPtr, seedPtr);
        console.log(`‚úÖ kyber512_keypair_seeded result: ${seededResult}`);

        // Test deterministic behavior - same seed should give same result
        const pkSeededPtr2 = module._malloc(800);
        const skSeededPtr2 = module._malloc(1632);
        
        try {
          const seededResult2 = module._kyber512_keypair_seeded(pkSeededPtr2, skSeededPtr2, seedPtr);
          
          // Compare first 8 bytes of public keys
          const pk1Sample = [];
          const pk2Sample = [];
          for (let i = 0; i < 8; i++) {
            pk1Sample.push(module.getValue(pkSeededPtr + i, 'i8') & 0xFF);
            pk2Sample.push(module.getValue(pkSeededPtr2 + i, 'i8') & 0xFF);
          }
          
          const deterministicWorks = pk1Sample.every((v, i) => v === pk2Sample[i]);
          console.log(`‚úÖ Deterministic behavior: ${deterministicWorks}`);
          console.log(`   PK1: [${pk1Sample.map(x => x.toString(16).padStart(2, '0')).join(', ')}]`);
          console.log(`   PK2: [${pk2Sample.map(x => x.toString(16).padStart(2, '0')).join(', ')}]`);
          
        } finally {
          module._free(pkSeededPtr2);
          module._free(skSeededPtr2);
        }

      } finally {
        module._free(seedPtr);
        module._free(pkSeededPtr);
        module._free(skSeededPtr);
      }
    } else {
      console.log('\n7. ‚ö†Ô∏è  Seeded keypair function not available - may need to rebuild');
    }

    // Step 8: Test seeded encapsulation (if available)
    if (typeof module._kyber512_enc_seeded === 'function') {
      console.log('\n8. Testing seeded encapsulation...');
      
      // Generate a keypair first
      const pkPtr = module._malloc(800);
      const skPtr = module._malloc(1632);
      
      try {
        module._kyber512_keypair(pkPtr, skPtr);
        
        const encSeedPtr = module._malloc(32);
        const ctPtr = module._malloc(768);
        const ssPtr = module._malloc(32);
        
        try {
          // Create 32-byte encapsulation seed
          const encSeed = new Uint8Array(32);
          for (let i = 0; i < 32; i++) {
            encSeed[i] = (i * 7 + 99) & 0xFF;
          }
          
          module.writeArrayToMemory(encSeed, encSeedPtr);
          
          const encResult = module._kyber512_enc_seeded(ctPtr, ssPtr, pkPtr, encSeedPtr);
          console.log(`‚úÖ kyber512_enc_seeded result: ${encResult}`);
          
          // Read shared secret sample
          const ssSample = [];
          for (let i = 0; i < 8; i++) {
            ssSample.push(module.getValue(ssPtr + i, 'i8') & 0xFF);
          }
          console.log(`‚úÖ Shared secret sample: [${ssSample.map(x => x.toString(16).padStart(2, '0')).join(', ')}]`);
          
        } finally {
          module._free(encSeedPtr);
          module._free(ctPtr);
          module._free(ssPtr);
        }
        
      } finally {
        module._free(pkPtr);
        module._free(skPtr);
      }
    } else {
      console.log('\n8. ‚ö†Ô∏è  Seeded encapsulation function not available - may need to rebuild');
    }

    console.log('\nüéâ Debug test completed successfully!');
    
    // Final summary
    console.log('\nüìä Function availability summary:');
    console.log(`‚Ä¢ Basic functions: ${requiredFunctions.slice(0, 5).every(f => typeof module[f] === 'function') ? '‚úÖ' : '‚ùå'}`);
    console.log(`‚Ä¢ Seeded functions: ${requiredFunctions.slice(5).every(f => typeof module[f] === 'function') ? '‚úÖ' : '‚ùå'}`);
    console.log(`‚Ä¢ Memory operations: ${typeof module.writeArrayToMemory === 'function' && typeof module.getValue === 'function' ? '‚úÖ' : '‚ùå'}`);

  } catch (error) {
    console.error('‚ùå Debug test failed:', error);
    console.error('Stack trace:', error.stack);
  }
}

debugTest().catch(console.error);